{"ast":null,"code":"import * as i0 from \"@angular/core\";\nclass GoogleAuthService {\n  constructor() {\n    gapi.load('auth2', () => {\n      gapi.auth2.init({\n        client_id: 'YOUR_GOOGLE_CLIENT_ID',\n        scope: 'profile email'\n      }).then(auth2 => {\n        this.auth2 = auth2;\n      }).catch(error => {\n        console.error('Google Auth2 initialization failed:', error);\n      });\n    });\n  }\n  signInWithGoogle() {\n    return new Promise((resolve, reject) => {\n      this.auth2.signIn().then(googleUser => {\n        resolve(googleUser);\n      }).catch(error => {\n        reject(error);\n      });\n    });\n  }\n}\nGoogleAuthService.ɵfac = function GoogleAuthService_Factory(t) {\n  return new (t || GoogleAuthService)();\n};\nGoogleAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: GoogleAuthService,\n  factory: GoogleAuthService.ɵfac,\n  providedIn: 'root'\n});\nexport { GoogleAuthService };","map":{"version":3,"names":["GoogleAuthService","constructor","gapi","load","auth2","init","client_id","scope","then","catch","error","console","signInWithGoogle","Promise","resolve","reject","signIn","googleUser","factory","ɵfac","providedIn"],"sources":["C:\\Users\\PROMACT\\source\\repos\\Legal-AI\\legal-AI\\src\\app\\google-auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\ndeclare const gapi: any; // Declare the gapi object\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GoogleAuthService {\n  private auth2: any; // GoogleAuth object\n\n  constructor() {\n    gapi.load('auth2', () => {\n      gapi.auth2.init({\n        client_id: 'YOUR_GOOGLE_CLIENT_ID',\n        scope: 'profile email'\n      }).then((auth2: any) => {\n        this.auth2 = auth2;\n      }).catch((error: any) => {\n        console.error('Google Auth2 initialization failed:', error);\n      });\n    });\n  }\n\n  signInWithGoogle(): Promise<any> {\n    return new Promise((resolve, reject) => {\n      this.auth2.signIn().then((googleUser: any) => {\n        resolve(googleUser);\n      }).catch((error: any) => {\n        reject(error);\n      });\n    });\n  }\n}\n"],"mappings":";AAIA,MAGaA,iBAAiB;EAG5BC,YAAA;IACEC,IAAI,CAACC,IAAI,CAAC,OAAO,EAAE,MAAK;MACtBD,IAAI,CAACE,KAAK,CAACC,IAAI,CAAC;QACdC,SAAS,EAAE,uBAAuB;QAClCC,KAAK,EAAE;OACR,CAAC,CAACC,IAAI,CAAEJ,KAAU,IAAI;QACrB,IAAI,CAACA,KAAK,GAAGA,KAAK;MACpB,CAAC,CAAC,CAACK,KAAK,CAAEC,KAAU,IAAI;QACtBC,OAAO,CAACD,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;MAC7D,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;EAEAE,gBAAgBA,CAAA;IACd,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAI;MACrC,IAAI,CAACX,KAAK,CAACY,MAAM,EAAE,CAACR,IAAI,CAAES,UAAe,IAAI;QAC3CH,OAAO,CAACG,UAAU,CAAC;MACrB,CAAC,CAAC,CAACR,KAAK,CAAEC,KAAU,IAAI;QACtBK,MAAM,CAACL,KAAK,CAAC;MACf,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;;AAxBWV,iBAAiB,C;mBAAjBA,iBAAiB;AAAA;AAAjBA,iBAAiB,C;SAAjBA,iBAAiB;EAAAkB,OAAA,EAAjBlB,iBAAiB,CAAAmB,IAAA;EAAAC,UAAA,EAFhB;AAAM;SAEPpB,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}