{"ast":null,"code":"\"use strict\";\n\n// import { Injectable } from '@angular/core';\n// declare const gapi: any; // Declare the gapi object\n// @Injectable({\n//   providedIn: 'root'\n// })\n// export class GoogleAuthService {\n//   private auth2: any; // GoogleAuth object\n//   constructor() {\n//     gapi.load('auth2', () => {\n//       gapi.auth2.init({\n//         client_id: 'YOUR_GOOGLE_CLIENT_ID',\n//         scope: 'profile email'\n//       }).then((auth2: any) => {\n//         this.auth2 = auth2;\n//       }).catch((error: any) => {\n//         console.error('Google Auth2 initialization failed:', error);\n//       });\n//     });\n//   }\n//   signInWithGoogle(): Promise<any> {\n//     return new Promise((resolve, reject) => {\n//       this.auth2.signIn().then((googleUser: any) => {\n//         resolve(googleUser);\n//       }).catch((error: any) => {\n//         reject(error);\n//       });\n//     });\n//   }\n// }","map":{"version":3,"names":[],"sources":["C:\\Users\\PROMACT\\source\\repos\\Legal-AI\\legal-AI\\src\\app\\google-auth.service.ts"],"sourcesContent":["// import { Injectable } from '@angular/core';\n\n// declare const gapi: any; // Declare the gapi object\n\n// @Injectable({\n//   providedIn: 'root'\n// })\n// export class GoogleAuthService {\n//   private auth2: any; // GoogleAuth object\n\n//   constructor() {\n//     gapi.load('auth2', () => {\n//       gapi.auth2.init({\n//         client_id: 'YOUR_GOOGLE_CLIENT_ID',\n//         scope: 'profile email'\n//       }).then((auth2: any) => {\n//         this.auth2 = auth2;\n//       }).catch((error: any) => {\n//         console.error('Google Auth2 initialization failed:', error);\n//       });\n//     });\n//   }\n\n//   signInWithGoogle(): Promise<any> {\n//     return new Promise((resolve, reject) => {\n//       this.auth2.signIn().then((googleUser: any) => {\n//         resolve(googleUser);\n//       }).catch((error: any) => {\n//         reject(error);\n//       });\n//     });\n//   }\n// }\n"],"mappings":";;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"script","externalDependencies":[]}